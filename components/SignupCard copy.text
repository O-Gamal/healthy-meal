import { gql, useMutation } from '@apollo/client';
import { Stepper } from '@mantine/core';
import { Form, Formik } from 'formik';
import Image from 'next/image';
import Link from 'next/link';
import { useState } from 'react';
import * as Yup from 'yup';
import AvatarUploader from './AvatarUploader';
import { Select, TextInput } from './utils/FormElements';

interface SignupForm {
  name: string;
  email: string;
  password: string;
  passwordConfirmation: string;
  dateOfBirth?: string;
  gender?: string;
  weight?: number;
  height?: number;
}

const SignupCard = () => {
  const [formStep, setFormStep] = useState(0);

  const [signupFormData, setSignupFormData] = useState({
    name: '',
    email: '',
    password: '',
    passwordConfirmation: '',
    dateOfBirth: '',
    gender: '',
    weight: 0,
    height: 0,
  });

  // console.log(signupFormData);

  // console.log(data);

  return (
    <section className='bg-dark-secondary p-10 max-w-screen-sm mx-auto rounded-lg'>
      <h1 className='text-2xl text-center font-semibold mb-10'>Sign Up</h1>

      <Stepper
        active={formStep}
        color='teal'
        onStepClick={setFormStep}
        breakpoint='sm'
        radius='md'
      >
        <Stepper.Step
          label={<p className='text-white'>First step</p>}
          description='Account details'
          allowStepSelect={formStep > 0}
          loading={formStep === 0}
        >
          <section className='mt-5'>
            <FormStepOne
              setSignupFormData={setSignupFormData}
              signupFormData={signupFormData}
              setFormStep={setFormStep}
            />
          </section>
        </Stepper.Step>
        <Stepper.Step
          label={<p className='text-white'>Second step</p>}
          description='Personal details'
          allowStepSelect={formStep > 1}
          loading={formStep === 1}
        >
          <section className='mt-5'>
            <FormStepTwo
              setSignupFormData={setSignupFormData}
              signupFormData={signupFormData}
              setFormStep={setFormStep}
            />
          </section>
        </Stepper.Step>
        <Stepper.Step
          label={<p className='text-white'>Third step</p>}
          description='Profile Photo'
          allowStepSelect={formStep > 2}
          loading={formStep === 2}
        >
          <section className='mt-5'>
            <FormStepThree
              setSignupFormData={setSignupFormData}
              signupFormData={signupFormData}
              setFormStep={setFormStep}
            />
          </section>
        </Stepper.Step>
      </Stepper>
    </section>
  );
};

interface FormStepProps {
  setSignupFormData?: (input: any) => void;
  signupFormData: SignupForm;
  setFormStep: (input: any) => void;
}

export const FormStepOne = ({
  setSignupFormData,
  signupFormData,
  setFormStep,
}: FormStepProps) => {
  // console.log(signupFormData);

  return (
    <Formik
      initialValues={{
        name: signupFormData.name || '',
        email: signupFormData.email || '',
        password: signupFormData.password || '',
        passwordConfirmation: signupFormData.passwordConfirmation || '',
      }}
      validationSchema={Yup.object({
        name: Yup.string().required(),
        email: Yup.string().email('Invalid email').required(),
        password: Yup.string().required('Password is required'),
        passwordConfirmation: Yup.string().oneOf(
          [Yup.ref('password'), null],
          'Passwords must match'
        ),
      })}
      onSubmit={(values) => {
        setSignupFormData({ ...signupFormData, ...values });
        setFormStep((current: number) => current + 1);
      }}
    >
      <Form className='space-y-5'>
        <section className='space-y-2'>
          <TextInput
            label='Enter Your Name'
            name='name'
            type='text'
            placeholder='name'
          />

          <TextInput
            label='Enter Your Email Address'
            name='email'
            type='email'
            placeholder='name@example.com'
          />

          <TextInput
            label='Enter Your Password'
            name='password'
            type='Password'
            placeholder='password'
          />

          <TextInput
            label='Confirm Your Password'
            name='passwordConfirmation'
            type='Password'
            placeholder='password confirmation'
          />
        </section>
        <button type='submit' className='primary-button text-lg w-full'>
          Next
        </button>
        <p className='text-center'>
          Have an account?{' '}
          <Link href='/signin'>
            <a className='underline hover:opacity-80 transition-opacity duration-200  '>
              Sign in
            </a>
          </Link>
        </p>
        <button className='secondary-button text-lg w-full flex items-center justify-center gap-1 hover:border-[#f5b626] hover:text-[#f5b626]'>
          <Image
            alt='google'
            src='/static/icons/google.svg'
            width={30}
            height={30}
          />
          Continue With Google
        </button>
        <button className='secondary-button text-lg w-full flex items-center justify-center gap-2 hover:border-[#2177d0] hover:text-[#2177d0]'>
          <Image
            alt='google'
            src='/static/icons/facebook.svg'
            width={24}
            height={24}
          />
          Continue WIth Facebook
        </button>
      </Form>
    </Formik>
  );
};

export const FormStepTwo = ({
  setSignupFormData,
  signupFormData,
  setFormStep,
}: FormStepProps) => {
  return (
    <Formik
      initialValues={{
        dateOfBirth: signupFormData.dateOfBirth || '',
        gender: signupFormData.gender || '',
        weight: signupFormData.weight || null,
        height: signupFormData.height || null,
      }}
      validationSchema={Yup.object({
        dateOfBirth: Yup.string().required('Date of birth is required'),
        gender: Yup.string().required().oneOf(['male', 'female']),
        weight: Yup.number().required().min(30).max(250),
        height: Yup.number().required().min(100).max(250),
      })}
      onSubmit={(values) => {
        setSignupFormData({ ...signupFormData, ...values });
        setFormStep((current: number) => current + 1);
      }}
    >
      <Form className='space-y-5'>
        <section className='space-y-2'>
          <TextInput
            label='Enter Your Date of Birth'
            name='dateOfBirth'
            type='date'
            placeholder='date of birth'
          />

          <Select label='Select Your Gender' name='gender'>
            <option value=''>Select one</option>
            <option value='male'>Male</option>
            <option value='female'>Female</option>
          </Select>

          <TextInput
            label='Enter Your Weight (kg)'
            name='weight'
            type='number'
            placeholder='xx kg'
          />

          <TextInput
            label='Enter Your height (cm)'
            name='height'
            type='number'
            placeholder='xx cm'
          />
        </section>
        <button type='submit' className='primary-button text-lg w-full'>
          Next
        </button>
        <button
          onClick={() => setFormStep((current: number) => current - 1)}
          className='secondary-button text-lg w-full'
        >
          Back
        </button>
      </Form>
    </Formik>
  );
};

export const FormStepThree = ({
  signupFormData,
  setFormStep,
}: FormStepProps) => {
  const [photo, setPhoto] = useState(null);

  const SIGNUP = gql`
    mutation SIGNUP($user: UserSignup!) {
      signup(user: $user)
    }
  `;

  const [signup, { data, loading, error }] = useMutation(SIGNUP);

  const handleSignup = () => {
    const userData = { ...signupFormData, photo };

    signup({
      variables: {
        user: {
          name: userData.name,
          email: userData.email,
          password: userData.password,
        },
      },
    });
  };

  return (
    <section className='space-y-5'>
      {error && (
        <p className='text-red text-lg text-center'>{`Submission error! ${error.message}`}</p>
      )}

      <AvatarUploader setPhoto={setPhoto} />
      <button
        type='submit'
        onClick={handleSignup}
        className='primary-button text-lg w-full'
      >
        {loading ? 'Loading ...' : 'Sign Up'}
      </button>
      <button
        onClick={() => setFormStep((current: number) => current - 1)}
        className='secondary-button text-lg w-full'
      >
        Back
      </button>
    </section>
  );
};

export default SignupCard;
